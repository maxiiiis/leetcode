class Solution {//倒N字排列(N字两边分别有numRows个字符，中间有numRows-2个字符)
public:
    string convert(string s, int numRows) {//时间复杂度O(n),遍历了字符串s
        vector<string> result(numRows);//优于char二维数组（vector中创建了numRows个string对象，都是空串）
        int change;
        int row=0;
        string result_string;//空串
        
        if(numRows==1) return s;//当行数为1，N字型排列后的字符串与原来相同，可直接返回节省时间
        
        for(int i=0; i<s.size(); i++)//把s中的各个字符逐“行”放入vector中，所要放入的“行数”有变化规律，是对前一个字符的行数加一或减一。是加还是减取决于前一个字符的行数row，当row为0时，行数的变化趋势由减变为加；当row为numRows-1时，行数的变化趋势由加变为减
        {
            result[row]+=s[i];//此处不可用result[row].append(s[i]);  s[i]是char的引用类型，append()的参数有多种，比如string类型、char *类型
            if(row==0) change=1;
            else if(row==numRows-1) change=-1;
            row=row+change;     
        }
        
        //逐行读取result，产生新字符串
        for(int i=0; i<result.size(); i++)
            result_string.append(result[i]);//或者result_string+=result[i];
        
        return result_string;
    }
};
