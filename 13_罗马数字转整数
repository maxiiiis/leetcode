class Solution {
public:
    /*
    int romanToInt(string s) {
        //暴力穷举法：遍历罗马数字s(从低到高或从高到低都可以)，通过if-else语句把所有面额都列举出来，判断当前罗马字符是哪种面额并把该面额加到result中
        //{1:"I", 4:"IV", 5:"V", 9:"IX", 10:"X", 40:"XL", 50:"L", 90:"XC", 100:"C", 400:"CD", 500:"D", 900:"CM", 1000:"M"}（注意要把特殊的4、9、40、90……加进去）
        
        int result=0;
        int i;
        for(i=0; i<s.size()-1; i++)//遍历到s的倒数第二个字符结束，防止s[i+1]访问越界
        { 
            //I分支
            if(s[i]=='I')
            {
                if(s[i+1]=='V')// 4:"IV"
                {
                    result+=4;
                    i++;//跳过下一个字符'V'
                }
                else if(s[i+1]=='X')// 9:"IX"
                {
                    result+=9;
                    i++;//跳过下一个字符'X'
                }
                else// 1:"I"
                    result+=1;  
            }
            
            //V分支（要放在I分支后）
            else if(s[i]=='V')// 5:"V"
                result+=5;
            
            //X分支（要放在I分支后）
            else if(s[i]=='X')// 10:"X"
            {
                if(s[i+1]=='L')// 40:"XL"
                {
                    result+=40;
                    i++;//跳过下一个字符'L'
                }
                else if(s[i+1]=='C')// 90:"XC"
                {
                    result+=90;
                    i++;//跳过下一个字符'C'
                }
                else// 10:"X"
                    result+=10; 
            }
            
            //L分支（要放在X分支后）
            else if(s[i]=='L')// 50:"L"
                result+=50;
            
            //C分支（要放在X分支后）
             else if(s[i]=='C')// 100:"C"
            {
                if(s[i+1]=='D')// 400:"CD"
                {
                    result+=400;
                    i++;//跳过下一个字符'D'
                }
                else if(s[i+1]=='M')// 900:"CM"
                {
                    result+=900;
                    i++;//跳过下一个字符'M'
                }
                else// 100:"C"
                    result+=100; 
            }
            
            //D分支（要放在C分支后）
            else if(s[i]=='D')// 500:"D"
                result+=500;
            
            //M分支（要放在C分支后）
            else if(s[i]=='M')// 1000:"M"
                result+=1000;
        }
        
        
        if( i==(s.size()-1) )//处理s的最后一个字符
        {
            switch (s[i])
            {
                case 'I': result+=1;break;
                case 'V': result+=5;break;
                case 'X': result+=10;break;
                case 'L': result+=50;break;
                case 'C': result+=100;break;
                case 'D': result+=500;break;
                case 'M': result+=1000;break;    
            }
        }
        return result;
    }
    */
    
    
    int romanToInt(string s) {
        //默认输入的罗马数字s都符合书写规则：除特殊面额外，每个罗马字符都大于等于它右边的罗马字符
        //罗马数字的本质：把该罗马数字中所有面额对应的数值加起来，即为该罗马数字对应的数字 比如：XIV 对应 X+IV=10+4=X-I+V=10-1+5=14， LVIII 对应 L+V+I+I+I=50+5+1+1+1=58
        //根据上述规则，可将罗马数字转换成数字的过程看作加减法：
        //即遍历罗马数字s(从低到高或从高到低都可以)，若当前罗马字符大于等于其右边的字符，则把当前字符加到result中；若当前字符小于其右边的字符，则用result减去当前字符（特殊面额IV可看作是-I+V=-1+5=4）
        //当前字符跟其右边的字符比较 比 当前字符跟其左边的字符比较（每个罗马字符都小于等于它左边的罗马字符） 更好处理
        
        //用unordered_map比两个数组更好，因为哈希查找效率高
        //注意罗马字符应作为key，对应数值作为value
        //unordered_map容器内的数据类型应是char和int，而不是string和int，因为字符串string的引用s[i]所返回的类型是char的引用
        unordered_map<char,int> rtoi = { {'I',1},{'V',5},{'X',10},{'L',50},{'C',100},{'D',500},{'M',1000}};//此方法把特殊面额(两字符)看作单字符面额的加减组合，故不把特殊面额加进来
        int result=0;
        unordered_map<char,int>::iterator current,right;
        int i;
        for(i=0; i<(s.size()-1); i++)//从高到低(遍历到s的倒数第二个字符结束，防止s[i+1]访问越界)
        {
            current=rtoi.find(s[i]);
            right=rtoi.find(s[i+1]);
            if( current->second >= right->second )
                result+=current->second;
            else//若当前字符小于其右边的字符，说明当前字符和其右边的字符一定是特殊面额，一次处理两个字符能提升效率
            {
                result-=current->second;
                result+=right->second;
                i++;//跳过下一个字符
            }
        }
        
        if(i==(s.size()-1))//处理s的最后一个字符
        {
            current=rtoi.find(s[i]);
            result+=current->second;//不论是什么面额，最后一个字符一定是加法
        }
        
        return result;
    }
    
    
    
};
